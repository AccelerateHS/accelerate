{-# START_FILE {{name}}.cabal #-}
name:                   {{name}}
version:                0.1.0.0
-- synopsis:
-- description:
homepage:               https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme
license:                BSD3
license-file:           LICENSE
author:                 {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer:             {{author-email}}{{^author-email}}example@example.com{{/author-email}}
copyright:              {{copyright}}{{^copyright}}{{year}}{{^year}}2017{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}
category:               {{category}}{{^category}}Data{{/category}}
build-type:             Simple
extra-source-files:     README.md
cabal-version:          >=1.10

flag llvm-cpu
  description:          Enable the LLVM backend for multicore CPUs
  default:              True

flag llvm-ptx
  description:          Enable the LLVM backend for NVIDIA CUDA GPUs
  default:              True

library
  default-language:     Haskell2010
  hs-source-dirs:       src

  exposed-modules:
        Lib

  build-depends:
        base                        >= 4.7 && < 5
      , accelerate                  >= 1.0

executable {{name}}-exe
  default-language:     Haskell2010
  hs-source-dirs:       app
  main-is:              Main.hs

  build-depends:
        base
      , {{name}}
      , accelerate

  ghc-options:
      -O2
      -threaded
      -rtsopts

  if flag(llvm-cpu)
    cpp-options:
        -DACCELERATE_LLVM_NATIVE_BACKEND

    build-depends:
        accelerate-llvm-native      >= 1.0

  if flag(llvm-ptx)
    cpp-options:
        -DACCELERATE_LLVM_PTX_BACKEND

    build-depends:
        accelerate-llvm-ptx         >= 1.0

test-suite {{name}}-test
  default-language:     Haskell2010
  type:                 exitcode-stdio-1.0
  hs-source-dirs:       test
  main-is:              Test.hs

  build-depends:
        base
      , {{name}}

  ghc-options:
      -O2
      -threaded
      -rtsopts

source-repository head
  type:     git
  location: https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}

-- vim: nospell
{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE test/Test.hs #-}
-- |
-- Module      : Test
-- Copyright   : [{{year}}{{^year}}2017{{/year}}] {{author-name}}{{^author-name}}Author name here{{/author-name}}
-- License     : BSD3
--
-- Maintainer  : {{author-name}}{{^author-name}}Author name here{{/author-name}} <{{author-email}}{{^author-email}}example@example.com{{/author-email}}>
-- Stability   : experimental
-- Portability : non-portable (GHC extensions)
--

main :: IO ()
main = putStrLn "Test suite not yet implemented"

{-# START_FILE src/Lib.hs #-}
{-# LANGUAGE RebindableSyntax #-}
-- |
-- Module      : Lib
-- Copyright   : [{{year}}{{^year}}2017{{/year}}] {{author-name}}{{^author-name}}Author name here{{/author-name}}
-- License     : BSD3
--
-- Maintainer  : {{author-name}}{{^author-name}}Author name here{{/author-name}} <{{author-email}}{{^author-email}}example@example.com{{/author-email}}>
-- Stability   : experimental
-- Portability : non-portable (GHC extensions)
--

module Lib (

  dotp

) where

import Data.Array.Accelerate

-- | A simple vector inner product
--
dotp :: Acc (Vector Double) -> Acc (Vector Double) -> Acc (Scalar Double)
dotp xs ys = fold (+) 0 ( zipWith (*) xs ys)

{-# START_FILE app/Main.hs #-}
{-# LANGUAGE CPP #-}
-- |
-- Module      : Main
-- Copyright   : [{{year}}{{^year}}2017{{/year}}] {{author-name}}{{^author-name}}Author name here{{/author-name}}
-- License     : BSD3
--
-- Maintainer  : {{author-name}}{{^author-name}}Author name here{{/author-name}} <{{author-email}}{{^author-email}}example@example.com{{/author-email}}>
-- Stability   : experimental
-- Portability : non-portable (GHC extensions)
--

module Main where

import Lib

import Text.Printf
import Prelude                                                      as P

import Data.Array.Accelerate                                        as A
#ifdef ACCELERATE_LLVM_NATIVE_BACKEND
import Data.Array.Accelerate.LLVM.Native                            as CPU
#endif
#ifdef ACCELERATE_LLVM_PTX_BACKEND
import Data.Array.Accelerate.LLVM.PTX                               as PTX
#endif

main :: IO ()
main = do
  let
      xs :: Vector Double
      xs = fromList (Z:.10) [0..]

      ys :: Vector Double
      ys = fromList (Z:.10) [1,3..]

  printf "input data:\n"
  printf "xs = %s\n" (show xs)
  printf "ys = %s\n\n" (show ys)

  printf "the function to execute:\n"
  printf "%s\n\n" (show dotp)

#ifdef ACCELERATE_LLVM_NATIVE_BACKEND
  printf "result with CPU backend: dotp xs ys = %s\n" (show (CPU.runN dotp xs ys))
#endif
#ifdef ACCELERATE_LLVM_PTX_BACKEND
  printf "result with PTX backend: dotp xs ys = %s\n" (show (PTX.runN dotp xs ys))
#endif

{-# START_FILE README.md #-}
# {{name}}

{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) {{year}}{{^year}}2017{{/year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}}{{^author-name}}Author name here{{/author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
